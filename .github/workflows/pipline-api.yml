name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
    paths:
      - 'hotel-api/**'
      - '.github/workflows/**'

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./hotel-api

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: hotel_api_test
          MYSQL_USER: user
          MYSQL_PASSWORD: password
          MYSQL_ROOT_PASSWORD: password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql, pdo_mysql
        coverage: xdebug

    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"

    - name: Install Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Generate key
      run: php artisan key:generate

    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache

    - name: Execute tests
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: hotel_api_test
        DB_USERNAME: user
        DB_PASSWORD: password
      run: |
        echo "Running Tests..."
        php artisan test --testsuite=Feature,Unit
        echo "Tests completed!"

  security:
    needs: test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./hotel-api

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: hotel_api_test
          MYSQL_USER: user
          MYSQL_PASSWORD: password
          MYSQL_ROOT_PASSWORD: password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql, pdo_mysql

    - name: Install Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Setup Database and Cache Tables
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: hotel_api_test
        DB_USERNAME: user
        DB_PASSWORD: password
      run: |
        php artisan config:clear
        php artisan cache:clear
        php artisan view:clear
        php artisan route:clear
        php artisan cache:table
        php artisan migrate --force
        
    - name: Run Composer Audit
      run: |
        echo "Running Composer Security Audit..."
        composer audit
        if [ $? -eq 0 ]; then
          echo "No security vulnerabilities found!"
        else
          echo "Security vulnerabilities found!"
          exit 1
        fi

    - name: Check for Known Vulnerabilities
      run: |
        echo "Checking for known vulnerabilities..."
        composer show --direct --format=json | jq -r '.installed[] | .name + " " + .version' | while read package version; do
          response=$(curl -s "https://packagist.org/packages/$package.json")
          if echo "$response" | jq -e '.security-advisories != null and .security-advisories != []' > /dev/null; then
            echo "⚠️ Security advisory found for $package version $version"
            exit 1
          fi
        done
        echo "No known vulnerabilities found in direct dependencies!"

    - name: Setup Production Environment
      run: |
        echo "Setting up production environment..."
        cp .env.example .env
        sed -i 's/APP_ENV=local/APP_ENV=production/' .env
        sed -i 's/APP_DEBUG=true/APP_DEBUG=false/' .env
        sed -i 's/CACHE_DRIVER=database/CACHE_DRIVER=file/' .env
        sed -i 's/SESSION_DRIVER=database/SESSION_DRIVER=file/' .env
        sed -i 's/QUEUE_CONNECTION=database/QUEUE_CONNECTION=sync/' .env
        php artisan key:generate
        echo "Environment configured for production"

    - name: Laravel Security Check
      env:
        APP_ENV: production
        APP_DEBUG: false
        CACHE_DRIVER: file
        SESSION_DRIVER: file
        QUEUE_CONNECTION: sync
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: hotel_api_test
        DB_USERNAME: user
        DB_PASSWORD: password
      run: |
        echo "Running Laravel specific security checks..."
        
        # Update .env to use file driver
        sed -i 's/CACHE_DRIVER=.*/CACHE_DRIVER=file/' .env
        sed -i 's/SESSION_DRIVER=.*/SESSION_DRIVER=file/' .env
        
        # Clear cache files manually
        rm -rf bootstrap/cache/*.php
        rm -rf storage/framework/cache/*
        rm -rf storage/framework/views/*
        rm -rf storage/framework/sessions/*
        
        # Run environment check
        php artisan about --only=environment
        
        # Cache configuration without database
        php artisan config:cache
        php artisan route:cache
        php artisan view:cache
        
        echo "Laravel security checks completed!"

  build:
    needs: security
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./hotel-api

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql, pdo_mysql

    - name: Install Dependencies
      run: composer install --no-dev --optimize-autoloader

    - name: Setup Production Environment
      run: |
        echo "Setting up production environment..."
        cp .env.example .env
        sed -i 's/APP_ENV=local/APP_ENV=production/' .env
        sed -i 's/APP_DEBUG=true/APP_DEBUG=false/' .env
        sed -i 's/CACHE_DRIVER=database/CACHE_DRIVER=file/' .env
        sed -i 's/SESSION_DRIVER=database/SESSION_DRIVER=file/' .env
        sed -i 's/QUEUE_CONNECTION=database/QUEUE_CONNECTION=sync/' .env
        php artisan key:generate
        echo "Environment configured for production"

    - name: Clear and Cache Config
      env:
        APP_ENV: production
        APP_DEBUG: false
        CACHE_DRIVER: file
        SESSION_DRIVER: file
        QUEUE_CONNECTION: sync
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: hotel_api_test
        DB_USERNAME: user
        DB_PASSWORD: password
      run: |
        echo "Optimizing application..."
        # First, update the .env file to ensure file-based caching
        sed -i 's/CACHE_DRIVER=.*/CACHE_DRIVER=file/' .env
        sed -i 's/SESSION_DRIVER=.*/SESSION_DRIVER=file/' .env
        sed -i 's/QUEUE_CONNECTION=.*/QUEUE_CONNECTION=sync/' .env

        # Clear all caches without database interaction
        rm -rf bootstrap/cache/*.php
        rm -rf storage/framework/cache/*
        rm -rf storage/framework/views/*
        rm -rf storage/framework/sessions/*

        echo "Cache directories cleared manually"

        # Now generate the caches
        php artisan config:cache
        php artisan route:cache
        php artisan view:cache

        echo "Optimization completed!"

    - name: Create Build Directory
      run: |
        echo "Preparing build directory..."
        mkdir -p ../build
        cp -r . ../build/
        cd ../build
        rm -rf .git node_modules tests
        echo "Build directory prepared!"

    - name: Create Build Artifact
      run: |
        echo "Creating build artifact..."
        cd ../build
        tar -czf ../hotel-api/build.tar.gz .
        echo "Build artifact created!"

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-artifact
        path: ${{ github.workspace }}/hotel-api/build.tar.gz
        retention-days: 5
        compression-level: 9
        overwrite: true

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Download Build Artifact
      uses: actions/download-artifact@v4
      with:
        name: build-artifact
        path: ./artifacts

    - name: Simulate Deployment
      run: |
        echo "Starting deployment to production environment..."
        echo "Deploying build.tar.gz from ./artifacts..."
        echo "Running database migrations..."
        echo "Deployment completed successfully!"
